generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id
  name              String
  email             String            @unique
  emailVerified     Boolean
  image             String?
  createdAt         DateTime
  updatedAt         DateTime
  accounts          Account[]
  chatAnalyses      ChatAnalysis[]
  sentInvitations   Invitation[]      @relation("UserInvitations")
  members           Member[]
  memberDirectories MemberDirectory[]
  sessions          Session[]

  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  logo        String?
  metadata    String?
  createdAt   DateTime     @default(now())
  communities Community[]
  invitations Invitation[]
  members     Member[]

  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  inviterId      String
  organizationId String
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  inviter        User         @relation("UserInvitations", fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Community {
  id                String            @id @default(cuid())
  name              String
  description       String?
  imageUrl          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdBy         String
  organizationId    String
  applicationForm   ApplicationForm?
  chatAnalyses      ChatAnalysis[]
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberDirectories MemberDirectory[]

  @@map("community")
}

model ChatAnalysis {
  id                String            @id @default(cuid())
  userId            String
  title             String
  fileName          String
  fileUrl           String?
  totalMessages     Int
  totalMembers      Int
  dateRange         Json
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  analysisData      Json
  communityId       String
  community         Community         @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  memberDirectories MemberDirectory[]

  @@map("chat_analysis")
}

model MemberDirectory {
  id             String        @id @default(cuid())
  chatAnalysisId String?
  userId         String
  password       String?
  isActive       Boolean       @default(true)
  accessCount    Int           @default(0)
  lastAccessed   DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  communityId    String
  visibleFields  Json?         @default("{\"name\": true, \"email\": true, \"phone\": false, \"linkedin\": false}")
  chatAnalysis   ChatAnalysis? @relation(fields: [chatAnalysisId], references: [id], onDelete: Cascade)
  community      Community     @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member_directory")
}

model ApplicationForm {
  id                String              @id @default(cuid())
  communityId       String              @unique
  title             String
  description       String?
  isActive          Boolean             @default(true)
  isPublic          Boolean             @default(true)
  password          String?
  customSlug        String              @unique
  whatsappInviteUrl String?
  acceptanceMessage String?
  denialMessage     String?
  questions         Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  community         Community           @relation(fields: [communityId], references: [id], onDelete: Cascade)
  applications      MemberApplication[]

  @@map("application_form")
}

model MemberApplication {
  id                      String            @id @default(cuid())
  formId                  String
  email                   String
  responses               Json
  status                  ApplicationStatus @default(PENDING)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  reviewedAt              DateTime?
  reviewedBy              String?
  invitedAt               DateTime?
  confirmationEmailSent   Boolean           @default(false)
  confirmationEmailSentAt DateTime?
  emailDeliveryErrors     Json?
  statusEmailSent         Boolean           @default(false)
  statusEmailSentAt       DateTime?
  form                    ApplicationForm   @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("member_application")
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  DENIED
}
