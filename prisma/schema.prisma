// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id
  name              String
  email             String
  emailVerified     Boolean
  image             String?
  createdAt         DateTime
  updatedAt         DateTime
  sessions          Session[]
  accounts          Account[]
  chatAnalyses      ChatAnalysis[]
  memberDirectories MemberDirectory[]
  communities       Community[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Community {
  id                String            @id @default(cuid())
  name              String
  description       String?
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatAnalyses      ChatAnalysis[]
  memberDirectories MemberDirectory[]
  applicationForm   ApplicationForm?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("community")
}

model ChatAnalysis {
  id                String            @id @default(cuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId       String
  community         Community         @relation(fields: [communityId], references: [id], onDelete: Cascade)
  title             String
  fileName          String
  fileUrl           String?
  totalMessages     Int
  totalMembers      Int
  dateRange         Json
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  analysisData      Json
  memberDirectories MemberDirectory[]

  @@map("chat_analysis")
}

model MemberDirectory {
  id             String       @id @default(cuid())
  communityId    String
  community      Community    @relation(fields: [communityId], references: [id], onDelete: Cascade)
  chatAnalysisId String?
  chatAnalysis   ChatAnalysis? @relation(fields: [chatAnalysisId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  password       String?
  isActive       Boolean      @default(true)
  accessCount    Int          @default(0)
  lastAccessed   DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("member_directory")
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  DENIED
}

model ApplicationForm {
  id                String @id @default(cuid())
  communityId       String @unique
  community         Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  title             String
  description       String?
  isActive          Boolean @default(true)
  isPublic          Boolean @default(true)
  password          String?
  customSlug        String @unique
  whatsappInviteUrl String?
  acceptanceMessage String?
  denialMessage     String?
  questions         Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  applications      MemberApplication[]

  @@map("application_form")
}

model MemberApplication {
  id         String @id @default(cuid())
  formId     String
  form       ApplicationForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  email      String
  responses  Json
  status     ApplicationStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewedAt DateTime?
  reviewedBy String?
  invitedAt  DateTime?
  
  // Email tracking
  confirmationEmailSent Boolean @default(false)
  confirmationEmailSentAt DateTime?
  statusEmailSent Boolean @default(false)
  statusEmailSentAt DateTime?
  emailDeliveryErrors Json?

  @@map("member_application")
}
